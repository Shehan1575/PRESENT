from netmiko import ConnectHandler
from getpass import getpass

print('This script is made for the Uploaded topology with the code\nNetwork Devices---\n 1. 2x Routers\n 2. 2x Switches\n and -3x PCs')
print('|nPlease check the topology uploaded and the ip addressing table for more info.\n\nPlease give Router and Switch SSH Logins:')

Rhostname = input('Enter Router host ip Address:')
Rusername = input('Enter Router username : ')
Rpassword = getpass('Enter Router password : ')
REnpass = getpass("Enter Router Enable Password")
print('Router successfully saved.')

Shostname = input('Enter Switch host ip Address:')
Susername = input('Enter Switch username : ')
Spassword = getpass('Enter Switch password : ')
SEnpass = getpass("Enter Switch Enable Password")
print('Switch successfully saved.')


try:
    Router1 = {
        "device_type": "cisco_ios",
        "host": Rhostname,
        "username": Rusername,
        "password": Rpassword,
        "secret": REnpass
    }

    Switch1 = {
        "device_type": "cisco_ios",
        "host": Shostname,
        "username": Susername,
        "password": Spassword,
        "secret": SEnpass
    }

    def EIGRP():
        net_connect.send_command("network 192.168.100.0 0.0.0.255")
        net_connect.send_command("network 192.168.200.0 0.0.0.255")
        net_connect.send_command("network 192.168.6.0 0.0.0.255")
        net_connect.send_command("end")
        output = net_connect.send_command("sh ip proto")
        print(output)
        net_connect.disconnect()
        
    def OSPF():
        ospf_commands = ['','','','']
        net_connect.send_config_set(ospf_commands)
        
        net_connect.send_command("network 192.168.100.0 0.0.0.255 area 0")
        net_connect.send_command("network 192.168.200.0 0.0.0.255 area 0")
        net_connect.send_command("network 192.168.6.0 0.0.0.255 area 0")
        net_connect.send_command("end")
        output = net_connect.send_command("sh ip proto")
        print(output)
        net_connect.disconnect()
        
    def RIP():
        net_connect.send_command("network 192.168.100.0")
        net_connect.send_command("network 192.168.200.0")
        net_connect.send_command("network 192.168.6.0")
        net_connect.send_command("end")
        output = net_connect.send_command("sh ip route")
        print(output)
        net_connect.disconnect()
        
    print('\nAll the basic Configurations ignored because SSH enabled means Device is already configured. \n')  
    PC=int(input("Which protocol do you want to configure in Router1?\n 1. EIGRP\n 2. OSPF\n 3. RIP"))
    print('Connecting the Router')
    net_connect = ConnectHandler(**Router1)
    intcoms = ['enable','conf t','int loopback1','ip address 192.168.2.1 255.255.255.0','int g0/1.100','encapsulation det1q 100','ip address 192.168.100.1 255.255.255.0','int g0/1.200','encapsulation det1q 200','ip address 192.168.200.1 255.255.255.0','int s0/0/0','ip address 192.168.6.1','exit']

    for i in range(0,len(intcoms)):
        net_connect.send_command(intcoms[i])
        
    if PC == 1:
        try: 
            net_connect.send_command("router eigrp 10") 
            EIGRP()
        except:
            print('Configuring Router Failed!')
            
    if PC == 2:
        try: 
            net_connect.send_command("router ospf 1") 
            OSPF()
        except:
            print('Configuring Router Failed!')

    if PC == 3:
        try:
            net_connect.send_command("router rip")
            RIP()
        except:
            print('Configuring Router Failed!')
                
    print('\nRouter has been Configured\n')
    print('\n\n----------Switch Vlan Configuration-----------\n\n')

    net_connect = ConnectHandler(**Switch1)
    
    intcomsS = ["enable","conf t","Vlan 100","exit","Vlan 200","exit","int f0/2","switchport access vlan 100","switchport mode access","int f0/3","switchport access vlan 200","switchport mode access","int g0/1","no shut","switchport mode trunk","end"]

    for i in range(0,len(intcomsS)):
        net_connect.send_command(intcomsS[i])
        
    output = net_connect.send_command("sh vlan brief")
    print(output)
    net_connect.disconnect()

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-BACKUP-CODE-PEXPECT-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#

except:
    print('Something is went wronge with the ssh connection through netmiko and Changing to Backup Method.')
    print('Importing Required Modules...')
    try:
        import pexpect
        def pexEIGRP():
            ssh.sendline("network 192.168.100.0 0.0.0.255")
            ssh.sendline("network 192.168.200.0 0.0.0.255")
            ssh.sendline("network 192.168.6.0 0.0.0.255")
            ssh.sendline("end")
            ssh.sendline('sh ip proto')
            shproto=ssh.before()
            print(shproto)
            ssh.sendline(exit)
            
        def pexOSPF():
            ssh.sendline("network 192.168.100.0 0.0.0.255 area 0")
            ssh.sendline("network 192.168.200.0 0.0.0.255 area 0")
            ssh.sendline("network 192.168.6.0 0.0.0.255 area 0")
            ssh.sendline("end")
            ssh.sendline('sh ip proto')
            shproto=ssh.before()
            print(shproto)
            ssh.sendline('exit')
        
        def pexRIP():
            ssh.sendline("network 192.168.100.0")
            ssh.sendline("network 192.168.200.0")
            ssh.sendline("network 192.168.6.0")
            ssh.sendline("end")
            ssh.sendline("sh ip route")
            shrou = ssh.before()
            print(shrou)
            ssh.sendline("exit")
            

        print('\nAll the basic Configurations ignored because SSH enabled means Device is already configured. \n')  
        PC=int(input("Which protocol do you want to configure in Router1?\n 1. EIGRP\n 2. OSPF\n 3. RIP"))

        ssh = pexpect.spawn('ssh ' + Rusername + '@' + Rhostname)
        result = ssh.expect('Password:')

        ssh.sendline(Rpassword)
        result = ssh.expect('>')
        ssh.sendline('enable')
        result = ssh.expect('Password:')
        ssh.sendline(REnpass)
        result = ssh.expect('#')
        ssh.sendline('configure terminal')
        result = ssh.expect(r'.\(config\)#')
        ssh.sendline('int loopback1')
        ssh.sendline('ip address 192.168.2.1 255.255.255.0')
        ssh.sendline('int g0/1.100')
        result = ssh.expect('#')
        ssh.sendline('encapsulation det1q 100')
        result = ssh.expect('#')
        ssh.sendline('ip address 192.168.100.1 255.255.255.0')
        ssh.sendline('int g0/1.200')
        ssh.sendline('encapsulation det1q 200')
        ssh.sendline('ip address 192.168.200.1 255.255.255.0')
        ssh.sendline('int s0/0/0')
        ssh.sendline('ip address 192.168.6.1')
        ssh.sendline('exit')

        if PC == 1:
            try: 
                ssh.sendline("router eigrp 10") 
                pexEIGRP()
            except:
                print('Configuring Router Failed!')
                
        if PC == 2:
            try: 
                ssh.sendline("router ospf 1") 
                pexOSPF()
            except:
                print('Configuring Router Failed!')

        if PC == 3:
            try:
                ssh.sendline("router rip")
                pexRIP()
            except:
                print('Configuring Router Failed!')
            
        print('\nRouter has been Configured\n')
        print('\n\n----------Switch Vlan Configuration-----------\n\n')

        ssh = pexpect.spawn('ssh ' + Susername + '@' + Shostname)
        result = ssh.expect('Password:')
        ssh.sendline(Spassword)
        result = ssh.expect('>')
        ssh.sendline('enable')
        result = ssh.expect('Password:')
        ssh.sendline(SEnpass)
        result = ssh.expect('#')
        ssh.sendline('configure terminal')
        result = ssh.expect(r'.\(config\)#')
        ssh.sendline("Vlan 100")
        ssh.sendline("exit")
        ssh.sendline("Vlan 200")
        ssh.sendline("exit")
        ssh.sendline("int f0/2")
        ssh.sendline("switchport access vlan 100")
        ssh.sendline("switchport mode access")
        ssh.sendline("int f0/3")
        ssh.sendline("switchport access vlan 200")
        ssh.sendline("switchport mode access")
        ssh.sendline("int g0/1")
        ssh.sendline("no shut")
        ssh.sendline("switchport mode trunk")
        ssh.sendline('end')
        shproto=ssh.before()
        print(shproto)
        ssh.sendline(exit)
    except:
        print("Failed to skip SSH key.  !!!-PLEASE ACCEPT THE SSH KEY MANUALLY-!!! then try again. ")
